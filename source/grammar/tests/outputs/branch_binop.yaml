# indent w/ 2 spaces
source: |
  if(spec[i] == 0 && spec[n+i] == 1) {
    x q[i];
  }
reference: |
  program
    header
    statement
      branchingStatement
        if
        (
        expression
          logicalAndExpression
            logicalAndExpression
              bitOrExpression
                xOrExpression
                  bitAndExpression
                    equalityExpression
                      equalityExpression
                        comparisonExpression
                          bitShiftExpression
                            additiveExpression
                              multiplicativeExpression
                                powerExpression
                                  expressionTerminator
                                    expressionTerminator
                                      spec
                                    [
                                    expression
                                      expressionTerminator
                                        i
                                    ]
                      equalityOperator
                        ==
                      comparisonExpression
                        bitShiftExpression
                          additiveExpression
                            multiplicativeExpression
                              powerExpression
                                expressionTerminator
                                  0
            &&
            bitOrExpression
              xOrExpression
                bitAndExpression
                  equalityExpression
                    equalityExpression
                      comparisonExpression
                        bitShiftExpression
                          additiveExpression
                            multiplicativeExpression
                              powerExpression
                                expressionTerminator
                                  expressionTerminator
                                    spec
                                  [
                                  expression
                                    logicalAndExpression
                                      bitOrExpression
                                        xOrExpression
                                          bitAndExpression
                                            equalityExpression
                                              comparisonExpression
                                                bitShiftExpression
                                                  additiveExpression
                                                    additiveExpression
                                                      multiplicativeExpression
                                                        powerExpression
                                                          expressionTerminator
                                                            n
                                                    +
                                                    multiplicativeExpression
                                                      powerExpression
                                                        expressionTerminator
                                                          i
                                  ]
                    equalityOperator
                      ==
                    comparisonExpression
                      bitShiftExpression
                        additiveExpression
                          multiplicativeExpression
                            powerExpression
                              expressionTerminator
                                1
        )
        programBlock
          {
          statement
            expressionStatement
              expression
                expressionTerminator
                  subroutineCall
                    x
                    indexIdentifierList
                      indexIdentifier
                        q
                        [
                        expressionList
                          expression
                            expressionTerminator
                              i
                        ]
              ;
          }
