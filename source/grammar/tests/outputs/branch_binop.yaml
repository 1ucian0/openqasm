# indent w/ 2 spaces
source: |
  if(spec[i] == 0 && spec[n+i] == 1) {
    x q[i];
  }
reference: |
  program
    header
    statement
      branchingStatement
        if
        (
        expression
          logicalAndExpression
            logicalAndExpression
              comparisonExpression
                comparisonExpression
                  orExpression
                    xOrExpression
                      bitAndExpression
                        bitShiftExpression
                          additiveExpression
                            multiplicativeExpression
                              expressionTerminator
                                expressionTerminator
                                  spec
                                [
                                expression
                                  expressionTerminator
                                    i
                                ]
                relationalOperator
                  ==
                orExpression
                  xOrExpression
                    bitAndExpression
                      bitShiftExpression
                        additiveExpression
                          multiplicativeExpression
                            expressionTerminator
                              0
            &&
            comparisonExpression
              comparisonExpression
                orExpression
                  xOrExpression
                    bitAndExpression
                      bitShiftExpression
                        additiveExpression
                          multiplicativeExpression
                            expressionTerminator
                              expressionTerminator
                                spec
                              [
                              expression
                                logicalAndExpression
                                  comparisonExpression
                                    orExpression
                                      xOrExpression
                                        bitAndExpression
                                          bitShiftExpression
                                            additiveExpression
                                              additiveExpression
                                                multiplicativeExpression
                                                  expressionTerminator
                                                    n
                                              +
                                              multiplicativeExpression
                                                expressionTerminator
                                                  i
                              ]
              relationalOperator
                ==
              orExpression
                xOrExpression
                  bitAndExpression
                    bitShiftExpression
                      additiveExpression
                        multiplicativeExpression
                          expressionTerminator
                            1
        )
        programBlock
          {
          statement
            expressionStatement
              expression
                expressionTerminator
                  subroutineCall
                    x
                    expressionList
                      expression
                        expressionTerminator
                          expressionTerminator
                            q
                          [
                          expression
                            expressionTerminator
                              i
                          ]
              ;
          }
