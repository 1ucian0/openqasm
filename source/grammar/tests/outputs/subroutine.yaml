# indent w/ 2 spaces
source: |
  def test_sub1(int[5]:i) qubit:q1, qubit[5]:q2 -> int[10] {
    int[10] result;
    if (result == 2) return 1 + result;
    return result;
  }
  def test_sub2(int[5]:i) {
    for j in {2, 3}
      i += j;
    return i+1;
  }
reference: |
  program
    header
    globalStatement
      subroutineDefinition
        def
        test_sub1
        (
        classicalArgumentList
          classicalArgument
            classicalType
              singleDesignatorType
                int
              designator
                [
                expression
                  expressionTerminator
                    5
                ]
            association
              :
              i
        )
        quantumArgumentList
          quantumArgument
            quantumType
              qubit
            association
              :
              q1
          ,
          quantumArgument
            quantumType
              qubit
            designator
              [
              expression
                expressionTerminator
                  5
              ]
            association
              :
              q2
        returnSignature
          ->
          classicalType
            singleDesignatorType
              int
            designator
              [
              expression
                expressionTerminator
                  10
              ]
        subroutineBlock
          {
          statement
            classicalDeclarationStatement
              classicalDeclaration
                singleDesignatorDeclaration
                  singleDesignatorType
                    int
                  designator
                    [
                    expression
                      expressionTerminator
                        10
                    ]
                  identifierList
                    result
              ;
          statement
            branchingStatement
              if
              (
              expression
                logicalAndExpression
                  orExpression
                    xOrExpression
                      bitAndExpression
                        equalityExpression
                          equalityExpression
                            comparisonExpression
                              bitShiftExpression
                                additiveExpression
                                  multiplicativeExpression
                                    expressionTerminator
                                      result
                          equalityOperator
                            ==
                          comparisonExpression
                            bitShiftExpression
                              additiveExpression
                                multiplicativeExpression
                                  expressionTerminator
                                    2
              )
              programBlock
                controlDirective
                  returnStatement
                    return
                    expression
                      logicalAndExpression
                        orExpression
                          xOrExpression
                            bitAndExpression
                              equalityExpression
                                comparisonExpression
                                  bitShiftExpression
                                    additiveExpression
                                      additiveExpression
                                        multiplicativeExpression
                                          expressionTerminator
                                            1
                                      +
                                      multiplicativeExpression
                                        expressionTerminator
                                          result
                    ;
          returnStatement
            return
            expression
              expressionTerminator
                result
            ;
          }
    globalStatement
      subroutineDefinition
        def
        test_sub2
        (
        classicalArgumentList
          classicalArgument
            classicalType
              singleDesignatorType
                int
              designator
                [
                expression
                  expressionTerminator
                    5
                ]
            association
              :
              i
        )
        subroutineBlock
          {
          statement
            loopStatement
              loopSignature
                for
                j
                in
                setDeclaration
                  {
                  expressionList
                    expression
                      expressionTerminator
                        2
                    ,
                    expression
                      expressionTerminator
                        3
                  }
              programBlock
                statement
                  assignmentStatement
                    classicalAssignment
                      indexIdentifier
                        i
                      assignmentOperator
                        +=
                      expression
                        expressionTerminator
                          j
                    ;
          returnStatement
            return
            expression
              logicalAndExpression
                orExpression
                  xOrExpression
                    bitAndExpression
                      equalityExpression
                        comparisonExpression
                          bitShiftExpression
                            additiveExpression
                              additiveExpression
                                multiplicativeExpression
                                  expressionTerminator
                                    i
                              +
                              multiplicativeExpression
                                expressionTerminator
                                  1
            ;
          }
  
