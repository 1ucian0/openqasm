# indent w/ 2 spaces
source: |
  bit[2] a;
  creg b[2];
  qubit[5] q1;
  qreg q2[7];
  let q = q1 ++ q2;
  let c = a[{0,1}] ++ b[1:2];
  let qq = q1[{1,3,4}];
  let qqq = qq ++ q2[1:2:6];
  let d = c;
  let e = d[1];
reference: |
  program
    header
    statement
      classicalDeclarationStatement
        classicalDeclaration
          bitDeclaration
            bit
            designator
              [
              expression
                expressionTerminator
                  2
              ]
            a
        ;
    statement
      classicalDeclarationStatement
        classicalDeclaration
          bitDeclaration
            creg
            b
            designator
              [
              expression
                expressionTerminator
                  2
              ]
        ;
    globalStatement
      quantumDeclarationStatement
        quantumDeclaration
          qubit
          designator
            [
            expression
              expressionTerminator
                5
            ]
          q1
        ;
    globalStatement
      quantumDeclarationStatement
        quantumDeclaration
          qreg
          q2
          designator
            [
            expression
              expressionTerminator
                7
            ]
        ;
    statement
      aliasStatement
        let
        q
        =
        indexIdentifier
          indexIdentifier
            q1
          ++
          indexIdentifier
            q2
        ;
    statement
      aliasStatement
        let
        c
        =
        indexIdentifier
          indexIdentifier
            a
            [
            discreteSet
              {
              expressionList
                expression
                  expressionTerminator
                    0
                ,
                expression
                  expressionTerminator
                    1
              }
            ]
          ++
          indexIdentifier
            b
            rangeDefinition
              [
              expression
                expressionTerminator
                  1
              :
              expression
                expressionTerminator
                  2
              ]
        ;
    statement
      aliasStatement
        let
        qq
        =
        indexIdentifier
          q1
          [
          discreteSet
            {
            expressionList
              expression
                expressionTerminator
                  1
              ,
              expression
                expressionTerminator
                  3
              ,
              expression
                expressionTerminator
                  4
            }
          ]
        ;
    statement
      aliasStatement
        let
        qqq
        =
        indexIdentifier
          indexIdentifier
            qq
          ++
          indexIdentifier
            q2
            rangeDefinition
              [
              expression
                expressionTerminator
                  1
              :
              expression
                expressionTerminator
                  2
              :
              expression
                expressionTerminator
                  6
              ]
        ;
    statement
      aliasStatement
        let
        d
        =
        indexIdentifier
          c
        ;
    statement
      aliasStatement
        let
        e
        =
        indexIdentifier
          d
          [
          expression
            expressionTerminator
              1
          ]
        ;
